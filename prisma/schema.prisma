// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(uuid())
  clerkUserId     String      @unique //clerk user id 
  email           String      @unique
  name            String?     
  imageUrl        String?
  industry        String?    //Combined industry-subindustry (e.g "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt        DateTime    @default(now())
  updatedAt       DateTime    @updatedAt


  //Proile Fields
  bio             String?
  experience      Int?       // years of experience
  skills          String[]  // Array of skills

  assessments     Assessments[]
  resume          Resume?
  coverLetter     CoverLetter[]
}

model Assessments{
  id              String       @id @default(cuid())
  userId          String      
  user            User         @relation(fields: [userId], references: [id])
  quizScore       Float         // Overall quiz score
  questions       Json[]        // Array of {question, asnwers, userAnswer, isCorrect}
  category        String        // "Technical", "Behavioral", etc.
  improvmentTip   String?       // Ai-generated improvment tip
  createdAt       DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index ([userId])
}

model Resume{
  id            String        @id @default(cuid())
  userId        String        @unique       //ensures one resumer per user
  user          User          @relation(fields: [userId], references:[id])
  content       String        @db.Text      // Markdown content
  atsScore      Float?
  feedback      String?
  createdAt     DateTime      @default(now())
  updatedAt    DateTime      @updatedAt      
}

model CoverLetter{
  id          String        @id @default(cuid())
  userId      String        
  user        User          @relation(fields: [userId], references:[id])
  content     String        // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  createdAt    DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id          String        @id @default(cuid())
  industry    String        @unique     // The industry this data belongs to  (e.g., "tech-software-development")

  //Users in this industry
  users       User[]

  // Salary data
  salaryRanges    Json[]    //Array of {role:String, min:float, max:float, median: float, location:String?}

  //Industry trends
  growthRate    Float       //industry gtowth rate
  demandLevel   DemandLevel      // "High", "Medium", "Low"
  topSkills     String[]    //Most in-demand skills

  //Market conditions
  marketOutlook MarketOutlook      //"Positive", "Neutral", "Negaive"
  keyTrends     String[]    //Array of current industry trends

  //Learning suggestions
  reccomendations String[]  //skills reccomended for the industry

  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  //Scheduled update time

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}